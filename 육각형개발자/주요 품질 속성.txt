
가용성(Availability) 
시스템이 얼마나 오랫동안 사용할 수 있는지 나타내는 속성인다. 99.99%와 같이 사용 가능 시간/전체 시간 비율로 표시한다.

성능(Performance)
시스템의 최대 처리량, 평균 응답 시간 등을 포함하는 속성이다.

확장성(Scalability)
자원을 추가해서 증가한 사용자나 트래픽을 처리할 수 있는 시스템의 속성이다.

탄련성(Elasticity)
필요에 따라 자원을 추가하거나 반환하는 능력이다.

견고성(Robustness)
실행 중에 발생하는 에러나 잘못된 입력을 다루는 능력이다.

결함 허용(Fault tolerance)
일부 기능에 장애가 발생해도 시스템이 운영을 지속할 수 있는 능력이다.

신뢰성/안정성(Reliability/safety)
시스템 고장에 대비한 안전 장치가 필요한지 또는 생명에 영향을
주는 중요한 시스템인지를 나타내는 속성이다.

유지보수성(Maintainability)
얼마나 쉽게 시스템을 변경하고 항상할 수 있는지를 나타내는 속성이다.

지역화(Localization)
다양한 언어에 대한 지원을 표현하는 속성이다.

테스트 가능성(Testability)
소프트웨어 결과물이 주어진 테스트 환경에서 얼마나 테스트할 수 있는지를 나타낸다.

합법성(Legal)
시스템이 지켜야 할 법적 규제나 요건을 나타낸다.

보안(Security)
데이터베이스에 암호화해서 저장해야 할 데이터, 통신 구간의 암호화 등을 나타내는 속성이다.

배포 가능성(Deployability)
개발한 결과물을 제품에 쉽게 반영할 수 있는 정도를 표현한다.

추적성(Traceability)
무언가를 추적할 수 있는 능력이다.

아키텍처를 바꾸기 위해 모든걸 다시 개발하기도 한다. 일명 빅뱅(big bang) 방식이다.

아키텍처의 성능, 가용성, 확장성 같은 품질 속성을 높이려면 자연스럽게 구성 요소가 늘어난다.
구성 요소가 늘어나면 인프라 비용 역시 증가한다.

비용이 증가하고 시스템은 더 복잡해지는데 실질적으로 얻는 이점이 없다면 돈만 낭비한 것에 불과하다.

유지보수 비용도 증가한다. 그러니 아키텍처를 변경할 때는 확실하게 얻는 이점과 소요될 개발 비용을
고려해야 한다.

이렇게 해결해야 할 문제와 상관없는 복잡함을 우발적 복잡성(Accidental Complexity)이라고 부른다.

본질적 복잡성(Essential Complexity) 라고한다.

이렇게 특정 맥락에서 반복되는 문제 해결법을 패턴(Pattern) 이라고 부른다. 여러가지 설계 패턴을
알고 있으면 설계 품질과 유지보수성을 높이는 데 도움이 된다.

예를 들어 이벤트 기반 아키텍처를 사용하면 탄력성과 성능에는 장점이 있지만 트랜잭션 처리가 

복잡해지고 테스트도 어려워진다. 요구하는 성능이 낮거나 규모가 작다면 계층 아키텍처를 기반으로 한 
모놀리식 구조를 사용하는게 나을 수 있다.

기업 통합(Enterprise Integration) 패턴은 파일 전송부터 메시징에 이르기까지 시스템간 통합을
위한 패턴을 말한다.

결함 허용(Fault Tolerance) 패턴이다.

에러 발견, 에러 복구, 에러 완화 등 어떻게 처리할지에 대한 패턴을 포함하는 개념이다.
하트비트(Heartbeat), 재시작(Restart), 재시도 제한(Limit Retires), 서킷 브레이커(Circuit Breaker)
등이 결함 허용과 관련된 패턴이다.

전략 패턴, Aggregate, bulkhead


