지금까지 살펴본 인덱스들은 모두 1개의 칼럼만 포함된 인덱스였다. 하지만 실제 서비스용 데이터베이스에서는 2개 이상의 칼럼을 포함하는 인덱스가 더 많이 사용된다.
두 개 이상의 칼럼으로 구성된 인덱스를 다중 칼럼 인덱스(또는 복함 칼럼 인덱스)라고 하며, 또한 2개 이상의 칼럼이 연결됐다고 해서 "Concatenated Index"라고도 한다.

브랜치 노드(페이지)
페이지 번호 2
dept_no, emp_no, 레코드 주소
d001, 10017, 4
d001, 10108, 5
d002, 10080, 6
d003, 10013, 7

리프 노드(페이지)
페이지 번호4
dept_no, emp_no, 레코드 주소
d001, 10017
d001, 10055
d001, 10058

페이지 번호5
dept_no, emp_no, 레코드 주소
d001, 10108,
d002, 10042
d002, 10050
d002, 10059

페이지 번호6
d002, 10080
d002, 10132
d002, 10144
d003, 10005

페이지 번호 7
dept_no, emp_no, 레코드 주소
d003, 10013
d003, 10036
d004, 10003

그림 8.13 다중 칼럼 인덱스

dept_no 기준으로 정렬되고, dept_no 기준이 같은 것 에 한에서 emp_no 항목이 정렬된다. 브랜치 노드 항목에서 레코드 주소로 각각 매핑 된다.

8.3.6 B-Tree 인덱스의 정렬 및 스캔 방향
인덱스를 생성할 때 설정한 규칙에 따라서 인덱스의 키 값은 항상 오름차순이거나 내림차순으로 정렬되어 저장된다. 

8.3.6.1 인덱스의 정렬
MySQL 5.7 버전 까지는 컬럼 단위로 정렬 순서를 혼합 (ASC와 DESC 혼합)해서 인덱스를 생성할 수 없었다. 숫자 칼럼의 경우 -1 곱한 값의 저장하는 우회
방법을 사용했었다. 하지만 MySQL 8.0 버전부터는 다음과 같은 형태의 정렬 순서를 혼합한 인덱스도 생성할 수 있게 됐다.

mysql> create index ix_teamname_userscore on employees (team_name ASC, user_scode DESC);

8.3.6.1.1 인덱스 스캔 방향
first_name 칼럼에 대한 인덱스가 포함된 employees 테이블에 대해 다음 쿼리를 실행하는 과정을 한 번 살펴보자. MySQL은 이 쿼리를 실행하기 위해 인덱스를 처음부터
 오름차순으로 끝까지 읽어 first_name이 가장 큰(오름차순으로 읽었을 때 가장 마지막 레코드) 값 하나를 가져오는 것일까?

인덱스는 항상 오름차순으로만 정렬돼 있지만 인덱스를 최솟값부터 읽으면 오름차순으로 값을 가져올 수 있고, 최대값부터 거꾸로 읽으면 내림차순으로 값을 가져올 수 있다
는 것을 MySQL 옵티마이저는 이미 알고 있다.

즉, 오름차순으로 생성된 인덱스를 정순으로 읽으면 출력되는 결과 레코드는 자동으로 오름차순으로 정렬된 결과가 되고, 역순으로 읽으면 그 결과는 내림차순으로 정렬된
상태가 되는 것이다.

select *
from employees
where first_name >= 'Anneke'
order by first_name asc
limit 4;

select *
from employees
order by first_name desc
limit 5;

위 첫번째 쿼리는 first_name 칼럼에 정의된 인덱스를 이용해 "Anneke"라는 레코드를 찾은 후, 정순으로 해당 인덱스를 읽으면서 4개의 레코드만 가져오면 아무런 비용을
들이지 않고도 원하는 정렬 효과를 얻을 수 잇다. order 처리나 min() 또는 max() 함수 등의 최적화가 필요한 경우에 MySQL 옵티마이저는 인덱스의 읽기 방향을 전환해서
사용하도록 실행 계획을 만들어 낸다.

8.3.6.1.2 내림차순 인덱스
MySQL 서버에서 다음 두 쿼리는 실제 내림차순인진 오름차순인지 관계없이 인덱스를 읽는 순서만 변경해서 해결할 수 있다는 것을 살펴봤다.

select * from employees order by first_name asc limit 10;
select * from employees order by first_name desc limit 10;

MySQL 8.0의 복합 인덱스에서 각각의 칼럼이 내림차순과 오름차순이 혼합된 경우에는 MySQL 8.0의 내림차순 인덱스로만 해결될 수 있다.

mysql> create index ix_teamname_userscore on employees (team_name asc, user_score desc);

mysql> create index ix_fristname_asc on employees (frist_name ASC);
mysql> create index ix_firstname_desc on employees (first_name DESC);

오름차순 인덱스(Ascending Index)
2 > 1, 3

내림차순 인덱스(Descending Index)
2 > 3, 1

오름차순 인덱스: 작은 값의 인덱스 키가 B-Tree의 왼쪽으로 정렬된 인덱스
내림차순 인덱스: 큰 값의 인덱스 키가 B-Tree의 왼쪽으로 정렬된 인덱스
인덱스 정순 스캔(Forward index scan): 인덱스 키의 크고 작음에 관계없이 인덱스 리프 노드의 왼쪽 페이지부터 오른쪽으로 스캔
인덱스 역순 스캔(Backward index scan): 인덱스 키의 크고 작음에 관계없이 인덱스 리프 노드의 오른쪽 페이지부터 왼쪽으로 스캔

이제 내림차순 인덱스의 필요성에 대해 간단한 테스트 결과를 살펴보면서 알아보자. 간단한 테스트를 위해 다음과 같이 테스트용 테이블을 생성하고 대략 1천만 건 정도의
레코드를 준비해보자.
mysql> create table t1(
    tid int not null auto_increment
    , table_name varchar(64)
    , column_name varchar(64)
    , ordinal_position int
    , primary key(tid)
) engine = InnoDB;

insert into t1 select null, table_name, column_name, ordinal_position from information_schema.columns;
insert into t1 select null, table_name, column_name, ordinal_position from t1;

// ... 12번 실행 ...

select count(*) from t1; 

// count , 12619776

mysql> select * from t1 order by tid asc limit 1269775, 1;
1 row in set (4.15 sec)

mysql> select * from t1 order by tid desc limit 1269775, 1;
1 row in set (5.35 sec)

역순 정렬 쿼리가 정순 정렬 쿼리보다 28.9% 더 시간이 걸리는 것을 확인할 수 있다. 

- 페이지 잠금이 인덱스 정순 스캔(Forward index scan)에 적합한 구조
- 페이지 내에서 인덱스 레코드가 단방향으로만 연결된 구조

InnoDB 데이터 & 인덱스 페이지
Infimum -> 키값,데이터 -> .... -> Supermum

그림 8.16에서는 InnoDB 페이지 내부에서 레코드들이 정렬 순서대로 저장돼 있는 것처럼 표시돼 있지만 실제로 InnDB 페이지는
힙(Heap)처럼 사용되기 때문에 물리적으로 저장이 순서대로 배치 되지는 않는다. 

내림차순과 오름차순 인덱스의 내부적인 차이로 인한 성능을 살펴봤다. 이제 서비스 요건에 맞게 어떤 정렬 순서의 인덱스를
선택해야 할지 살펴보자. 일반적으로 인덱스를 ORDER BY ... DESC하는 쿼리가 소량의 레코드에 드물게 실행되는 경우라면 
내림차순 인덱스를 굳이 고려할 필요는 없어 보인다.

mysql> select * from tab where userid=? order by score desc limit 10;

이 쿼리의 경우 다음 두 가지 인덱스 모두 적절한 선택이 될 수 있다.

오름차순 인덱스: INDEX (userid ASC, score ASC)
내림차순 인덱스: INDEX (userid DESC, score DESC)

하지만 위 쿼리가 많은 레코드를 조회하면서 빈번하게 실행된다면 오름차순 인덱스보다는 내림차순 인덱스가 더 효율적이라고 
볼 수 있다.

또한 많은 쿼리가 인덱스의 앞쪽만 또는 뒤쪽만 집중적으로 읽어서 인덱스의 특정 페이지 잠금이 병목이 될 것으로 예상된다면
쿼리에서 자주 사용되는 정렬 순서대로 인덱스를 생성하는 것이 잠금 병목 현상을 완화하는 데 도움이 될 것이다.

















