
트랜잭션의 격리 수준(isolation level)이란 여러 트랜잭션이 동시에 처리될 때 특정 트랜잭션이 다른 트랙잭션에서 변경하거나 조회하는 데이터를 볼 수 있게
허용할지 말지를 결정하는 것이다. 

격리 수준은 크게 "READ UNCOMMITED", "READ COMMITTED", "REPEATABLE READ", "SERIALIZABLE" 의 크게 4가지로 나눈다. 
"DIRTY READ"라고도 하는 READ UNCOMMITTED는 일반적인 데이터베이스에서는 거의 사용하지 않고 SERIALIZABLE 또한 동시성이 중요한 데이터베이스에서는 거의
사용 되지 않는다. 4개의 격리 수준에서 순서대로 뒤로 갈수록 각 트랙잭션 간의 데이터 격리(고립) 정도가 높아지며, 동시 처리 성능도 떨어지는 것이 일반적이
라고 볼 수 있다. 격리 수준이 높아질수록 MySQL 서버의 처리 성능이 많이 떨어질 것으로 생각하는 사용자가 많은데, 사실 SERIALIZABLE 격리 수준이 아니라면
크게 성능이 개선이나 저하는 발생하지 않는다.

데이터베이스의 격리 수준을 이야기하면 항상 함께 언급되는 세 가지 부정합의 문제점이 있다. 이 세가지 부정합의 문제는 격리 수준의 레벨에 따라 발생할 수 도
있고 발생하지 않을 수도 있다.

                    DIRTY READ, NON-REPEATABLE READ, PHANTOM READ
READ UNCOMMITTED    발생, 발생, 발생
READ COMMITTED      없음, 발생, 발생
REPEATABLE READ     없음, 없음, 발생(InnoDB는 없음)
SERIALIZABLE        없음, 없음, 없음

REPEATABLE READ 격리 수준에서는 PHANTOM READ가 발생할 수 있지만, InnoDB에서는 독특한 특성 때문에 REPEATABLE READ 격리 수준에서도 PHANTOM READ가 발
생하지 않는다. DIRTY READ나 NON-REPEATABLE READ, PHANTOM READ에 대한 내용은 각 격리 수준별 설명에서 소개하겠다. 

일반적인 온라인 서비스 목적으로는 READ COMMITTED와 REPEATABLE READ 중 하나를 사용한다. 오라클 같은 DBMS에서는 주로 READ COMMITTED 수준을 많이 사용하며, 
MySQL에서는 REPEATABLE READ를 주로 사용한다. 여기서 설명하는 SQL 예제는 모두 AUTOCOMMIT OFF 상태에서만 테스트 할 수 있다.

5.4.1 READ UNCOMMITTED
READ UNCOMMITTED 격리 수준에서는 그림 5.3과 같이 트랜잭션에서의 변경 내용이 COMMIT이나 ROLLBACK 여부에 상관없이 다른 트랜잭션에서 보인다.
그림 5.3은 다른 트랜잭션이 사용자 B가 실행하는 SELECT 쿼리의 결과에 어떤 영향을 미치는지를 보여주는 예제다.

사용자 A 
begin
insert(Lara)
emp_no, first_name
1, Francesca
2, Lara

사용자 B
select where emp_no = 2 결과 1건 반환

commit(Lara)

사용자 A는 Lara 라는 사원을 insert 한다. 아직 사용자가 commit 을 하기 전에 사용자 B는 emp_no = 2 인 사원을 검색하고 있다.
하지만 사용자는 B는 사용자 A가 insert한 사원의 정보를 커밋되지 않는 상태에서도 조회할 수 있다. 그런데 문제는
사용자 A가 rollback 하더라도 사용자 B는 Lara 가 정상적인 사원이라고 생각하고 계속 처리를 할 것이라는 점이다.

이 처럼 어떤 트랜잭션에서 처리한 작업이 완료되지 않았는데도 다른 트랜잭션에서 볼 수 있는 현상을 Dirty read라고 한다.
더티 리드가 허용되는 격리 수준은 표에서 보았듯이 READ UNCOMMITTED다. 
READ UNCOMMITTED는 RDBMS표준에서는 트랜잭션의 격리 수준으로 인정되지 않을 정도로 정합성에 문제가 많은 격리 수준이다.
MySQL을 사용한다면 최소한 READ COMMITTED 이상의 격리 수준을 사용할 것을 권장한다.

5.4.2 READ COMMITTED
READ COMMITTED는 오라클 DBMS에서 기본으로 사용되는 격리 수준이며, 온라인 서비스에서 가장 많이 선택되는 격리 수준이다. 
이 레벨에서는 Dirty read 같은 현상은 발생하지 않는다. 어떤 트랜잭션도 데이터가 commit이 완료된 데이터만 조회할 수 있기 때문이다.
그림 5.4는 READ COMMITTED 격리 수준에서 사용한 A가 변경한 내용이 사용자 B에게 어떻게 조회 되는지 보여준다.

사용자A

Begin

employees 테이블
emp_no, first_name
1, Francesca
2, Lara

update set frist_name = 'Toto' where emp_no = 2

employees 테이블
2, Toto

언두로그
emp_no, first_name
2, Lara

사용자 B 
sleect where emp_no=2
2, Lara (테이블이 아닌 언두 로그 데이터('Lara') 반환)

Commit
employees 테이블
1, Francesca
2, Lara

사용자 B가 select 쿼리 결과는 employees 테이블이 아니라 언두 영역에 백업된 레코드에서 가져온 것이다. 
READ COMMITED 격리 수준에서는 어떤 트랜잭션에서 변경한 내용이 커밋되기 전까지는 다른 트랜잭션에서 그러한 변경내역을 조회할 수 없기 때문이다.

READ COMMITED 격리 수준에서도 "NON-REPEATABLE READ"라는 부정합의 문제가 있다. 어떤 문제를 만들어 낼수 있는지 보여준다.

사용자 B

BEGIN

employees 테이블
emp_no, first_name
1, Francesca
2, Lara

select where first_name ='Toto'
결과 없음

사용자 A
BEGIN
emp_no, first_name
1, Francesca
2, Lara
update set first_name = 'Toto'
commit
2, Toto

사용자 B
select where first_name = 'Toto';
결과 1건 변환
emp_no, first_name
1, Francesca
2, Toto

사용자 B는 하나의 트랜잭션 내에서 똑같은 select 쿼리를 실행했을 때는 항상 같은 결과를 가져와야 한다는 "REPEATABLE READ" 정합성에 어긋나는 것이다.

일반적인 웹 프로그램에서는 크게 문제되지 않을 수 있지만 하나의 트랜잭션에서 동일 데이터를 여러 번 읽고 변경하는 작업이 금전적인 처리와 연결되면 문제가
될 수도 있다. 

예를 들어, 다른 트랜잭션에서 입금과 출금 처리가 계속 진행될 때 다른 트랙잭션에서 오늘 입금된 금액의 총합을 조회한다고 가정해보자. 그런데 "REPEATABLE READ"
가 보장되지 않기 때문에 총합을 계산하는 SELECT 쿼리는 실행될 때마다 다른 결과를 가져올 것이다. 중요한 것은 사용 중인 트랜잭션의 격리 수준에 의해
실행하는 SQL 문장이 어떤 결과를 가져오게 되는지를 정확히 예측할 수 있어야 한다는 것이다. 그리고 당연히 이를 위해서는 각 트랜잭션의 격리 수준이 어떻게
작동하는지 알아야 한다.

READ COMMITTED 격리 수준에서는 트랜잭션 내에서 실행되는 SELECT 문장과 트랜잭션 외부에서 실행되는 SELECT 문장의 차이가 별로 없다. 하지만 REPEATABLE READ
격리 수준에서는 기본적으로 SELECT 쿼리 문장도 트랜잭션 범위 내에서만 작동한다. 즉 BEGIN 명령으로 시작해 온종일 쿼리를 반복해 실행해 봐도
동일한 결과만 보게 된다.(아무리 다른 트랙잭션에서 그 데이터를 변경하고 COMMIT을 실행한다고 하더라도 말이다).


















