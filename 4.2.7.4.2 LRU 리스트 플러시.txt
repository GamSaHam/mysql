
InnoDB 스토리지 엔진은 LRU 리스트에서 사용 빈도가 낮은 데이터 페이지들을 제거해서 새로운 페이지들을 읽어올 공간을 만들어야 
하는데, 이를 위해 LRU 리스트(LUR_list) 플러시 함수가 사용된다. InnoDB 스토리지 엔진은 LRU 리스트 끝부분 부터 시작해서
최대 innodb_lru_scan_depth 시스템 변수에 설정된 개수만큼의 페이지들을 스캔한다. 

InnoDB 스토리지 엔진은 이때 스캔하면서 더티 페이지는 디스크에 동기화하게 하며, 클린 페이지는 즉시 프리(Free) 리스트로
페이지를 옮긴다. InnoDB 스토리지 엔진은 InnoDB 버퍼 풀 인스턴스별로 최대 innodb_lru_scan_depth 개수만큼 스캔하기 때문
에 실질적으로 LRU 리스트의 스캔은 (innodb_buffer_pool_instances * innodb_lru_scan_depth) 수만큼 수행한다.

4.2.7.5 버퍼 풀 상태 백업 및 복구
InnoDB 서버의 버퍼 풀은 쿼리의 성능에 매우 밀접하게 연결돼 있다. 쿼리 요청이 매우 빈번한 서버를 셧다운했다가 다시
시작하고 서비스를 시작하면 쿼리 처리 성능이 평상시보다 1/10도 안 되는 경우가 대부분일 것이다. 버퍼 풀에 쿼리들이 사용할
데이터가 이미 준비돼 있으므로 디스크에서 데이터를 일깆 않아도 쿼리가 처리될 수 있기 때문이다. 이렇게 디스크의 데이터가
버퍼 풀에 적재돼 있는 상태를 워밍업(Warming Up)이라고 표현하는데, 버퍼 풀이 잘 워밍업된 상태에서는 그렇지 않은 경우보다
몇십 배의 쿼리 속도를 보이는 것이 일반적이다. 그래서 MySQL 5.5 버전에서는 점검을 위해 MySQL 서버를 셧다운했다가 다시 
시작하는 경우 서비스를 오픈하기 전에 강제 워밍업을 위해 주요 테이블과 인덱스에 대해 풀 스캔을 한 번씩 실행하고 서비스를
 오픈했었다.

// MySQL 서버 셧다운 전에 버퍼 풀의 상태 백업
mysql> SET GLOBAL innodb_buffer_pool_dump_now=ON;

// MySQL 서버 재시작 후, 백업된 버퍼 풀의 상태 복구
mysql> SET GLOBAL innodb_buffer_pool_load_now=ON;

InnoDB 버퍼 풀의 백업은 데이터 디렉터리에 ib_buffer_pool이라는 이름의 파일로 생성되는데, 실제 이 파일의 크기를 보면
아무리 InnoDB 버퍼 풀이 크다 하더라도 몇십 MB 이하인 것을 알 수 있다. 이는 InnoDB 스토리지 엔진이 버퍼 풀의 LRU 리스트
에서 적재된 데이터 페이지의 메타 정보만 가져와서 저장하기 때문이다.

mysql> show status like 'Innodb_buffer_pool_dump_status';
+--------------------------------+------------------------------------+
| Variable_name                  | Value                              |
+--------------------------------+------------------------------------+
| Innodb_buffer_pool_dump_status | Dumping of buffer pool not started |
+--------------------------------+------------------------------------+
1 row in set (0.00 sec)

버퍼 풀 적재 작업에 너무 시간이 오래 걸려서 중간에 멈추고자 한다면 innodb_buffer_pool_load_abort 시스템 변수를 이용하면
된다. InnoDB의 버퍼 풀을 다시 복구하는 작업은 상당히 많은 디스크 읽기를 필요로 하기 때문에 버퍼 풀 복구가 실행 중인
상태에서 서비스를 재개하는 것은 좋지 않은 선택일 수도 있다. 그래서 버퍼 풀 복구 도중에 급히 서비스를 시작해야 한다면
다음과 같이 버퍼 풀 복구를 멈출 것을 권장한다.

mysql> SET GLOBAL innodb_buffer_pool_load_abort=ON;

InnoDB 버퍼 풀의 백업은 ib_buffer_pool 파일에 기록되는데, 그렇다고 해서 반드시 셧다운하기 직전의 파일일 필요는 없다.
InnoDB 스토리지 엔진은 ib_buffer_pool 파일에서 데이터 페이지의 목록을 가져와서 실제 존재하는 데이터 페이지이면 InnoDB
버퍼 풀로 젝재하지만 그렇지 않은 경우에는 그냥 조용히 무시해버린다. ib_buffer_pool 파일에 명시돼 있다고 해서 MySQL
서바가 비정상적으로 종료되거나 하지 않는다.

4.2.7.6 버퍼 풀의 적재 내용 확인
5.6 버전부터 MySQL 서버의 information_schema 데이터베이스의 innodb_buffer_page 테이블을 이용해 InnoDB 버퍼 풀의 메모리
에 어떤 테이블의 페이지들이 적재돼 있는지 확인할 수 있었다.

실제 서비스용으로 사용되는 MySQL 서버에서는 버퍼 풀의 상태를 확인하는 것은 거의 불가능했다.

mysql> 
select
it.name table_name,
ii.name index_name,
ici.n_cached_pages n_cached_pages
from information_schema.innodb_tables it
inner join information_schema.innodb_indexes ii on ii.table_id = it.table_id
inner join inofrmation_schema.innodb_cached_indexes ici on ici.index_id = ii.index_id
where it.name = concat('employees', '/', 'employees');

5.7에서는 동작안함

select 
    (
    select
    sum(ici.n_cached_pages) n_cached_pages
    from information_schema.innodb_tables it
    inner join information_schema.innodb_indexes ii on ii.table_id = it.table_id
    inner join inofrmation_schema.innodb_cached_indexes ici on ici.index_id = ii.index_id
    where it.name = concat(t.table_schema, '/', t.table_name)
    ) as total_cached_pages,
    ((t.data_length + t.index_length - t.data_free)/@@innodb_page_size) as total_pages
    from information_schema.tables t
    where t.table_schema = 'employees'
    and t.table_name = 'employees'

total_cached_pages, total_pages
323, 1668.0000


















