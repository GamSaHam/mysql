
5.7 버전부터 지원되기 시작한 데이터 암호화 기능은 처음에는 데이터 파일(테이블스페이스)에 대해서만 암호화 기능이 제공됐다. 그러다 MySQL 8.0 으로 업그레이드
되면서 데이터 파일뿐만 아니라 리두 로그나 언두 로그, 복제를 위한 바이너리 로그 등도 모두 암호화 기능을 지원하기 시작했다.

데이터 암호화 여부는 보안 감사에 필수적으로 언급되는 부분이다. 응용 프로그램의 암호화는 주로 중요 정보를 가진 칼럼 단위로 암호화를 수행하며, 데이터베이스
수준에서는 테이블 단위로 암호화를 적용한다.

7.1 MySQL 서버의 데이터 암호화
MySQL 서버의 암호화 기능은 그림 7.1에서와 같이 데이터베이스 서버와 디스크 사이의 데이터 읽고 쓰기 지점에서 암호화 또는 복호화를 수행한다. 그래서 MySQL 서버
에서 디스크 입축력 이외의 부분에서는 암호화 처리가 전혀 필요치 않다. 즉, MySQL 서버(InonoDB 스토리지 엔진)의 I/O 레이어에서만 데이터의 암호화 및 복호화 
과정이 실행되는 것이다.

MySQL > Innodb 스토리지 엔진 > InnoDB I/O 레이어 <-> 디스크 (데이터 파일, ...)

MySQL 서버에서 사용자의 쿼리를 처리하는 과정에서 테이블의 데이터 암호화돼 있는지 여부를 식별할 필요가 없으며, 암호화된 테이블도 그렇지 않은 테이블과 동일한
처리 과정을 거친다. 데이터 암호화 기능이 활성화돼 있다고 하더라도 MySQL 내부와 사용자 입장에서는 아무런 차이가 없기 때문에 이러한 암호화 방식을 가리켜
TDE(Transparent Data Encrption)이라고 한다. 또한 "Data at Rest Encryption" 라고도 하는데, "Data at Rest"는 메모리(In-Process)나 네트워크 전송(In-Tran
it) 단계가 아닌 디스크에 저장(At Rest)된 단계에서만 암호화된다는 의미로 사용되는 표현이다. MySQL 서버에서는 둘 모두 거의 동일한 표현으로 사용되지만 MySQL
메뉴얼에서는 TDE라는 표현을 사용한다.

7.1.1 2단계 키 관리
MySQL 서버의 TDE에서 암호화 키는 키링(KeyRing) 플로그인에 의해 관리되며, MySQL 8.0 버전에서 지원되는 키링 플러그인은 다음과 같다.

MySQL 커뮤니티 에디션에서는 keyring_file 플로그인 사용 가능하고, 나머지 플러그인 모두 MySQL 엔터프라이즈 에디션에서만 사용 가능하다.
- keyring_File File_Based 플로그인
- keyring_encrpted_file Keyring 플러그인
- keyring_okv KMIP 플러그인
- keyring_aws Amazon WebServices Keyring 플러그인

다양한 플러그인이 제공되지만 마스터 키를 관리하는 방법만 다를 뿐 MySQL 서버 내부적으로 작동하는 방식은 모두 동일하다. MySQL 서버의 키링 플러그인은 2단계
(2-Tier) 키 관리 방식을 사용하는데, 그림 7.2는 2단계 키 관리 아키텍처를 보여준다.


key(마스터키) -> 키링 플러그인(keyring_file, keyring_valut) <-> 
[MySQL 서버] <-> MySQL 플러그인 서비스 <-> InnoDB 스토리지 엔진(I/O 핸들러) <->
[디스크] 암호화되지 않은 데이터 파일, 암호화된 데이터 파일(테이블스페이스 키)

MySQL 서버의 데이터 암호화는 마스터 키(master key)와 테이블스페이스 키(tablespace key)라는 두 가지 종류의 키를 가지고 있는데, 
테이블스페이스 키는 플라이빗 키(private key)라고도 한다. 그림 7.2에서 보는 바와 같이 MySQL 서버는 HashCorp Vault 같은 외부 키 관리 솔루션(KMS, Key Man
agement Service) 또는 디스크의 파일(keyring_file 또는 keyring_encrpted_file) 에서 마스터 키를 가지고오고, 암호화된 테이블이 생성될 때마다
해당 테이블을 위한 임의의 테이블스페이스 키를 발급한다. 그리고 MySQL 서버는 마스터 키를 이용해 테이블스페이스키를 암호화해서 각 테이블의 데이터 파일 헤더
에 저장한다. 

하지만 마스터 키는 외부 파일을 이용하기 때문에 노출될 가능성이 있다. 그래서 마스터 키는 주기적으로 변경해야 한다. MySQL 서버의 마스터 키는 다음과 같이
변경할 수 있다.
mysql> ALTER INSTANCE ROTATE INNODB MASTER KEY;

마스터 키를 변경하면 MySQL 서버는 기존의 마스터 키를 이용해 각 테이블의 테이블스페이스 키를 복호화한 다음 새로운 마스터 키로 다시 암호화한다. 
마스터 키가 변경되는 동안 MySQL 서버의 테이블스페이스 키 자체와 데이터 파일의 데이터는 전혀 변경되지 않는다. 
이렇게 2단계 암호화 방식을 사용하는 이유는 암호화 키 변경으로 인한 과도한 시스템 부하를 피하기 위해서다. 

MySQL 서버의 TDE에서 지원되는 암호화 알고리즘은 AES 256비트이며, 이외의 알고리즘은 지원되지 않는다. 테이블스페이스 키는 AES-256 ECB(Electronic CodeBook)
알고리즘을 이용해 암호화 되고, 실제 데이터 파일은 AES-256 CBC(Cipher Block Chainning) 알고리즘을 이용해 암호화 된다.

MySQL 서버의 암호화는 TDE(Transparent Data Encryption) 방식이기 때문에 디스크로부터 한 번 읽은 데이터 페이지는 복호화되어 InnoDB의 버퍼 풀에 적재된다.
그래서 데이터 페이지가 한 번 메모리에 적재되면 암호화되지 않는 테이블과 동일한 성능을 보인다. 하지만 쿼리가 InnoDB 버퍼 풀에 존재하지 않는 데이터 페이지를
읽어야 하는 경우에는 복호화 과정을 거치기 때문에 복호화 시간 동안 쿼리 처리가 지연될 것이다. 

데이터 페이지 저장은 사용자의 쿼리를 처리하는 스레드가 아닌 MySQL 서버의 백그라운드 스레드가 수행하기 때문에 실제 사용자 쿼리가 지연되는 것은 아니다.

SELECT뿐만 아니라 UPATE 명령 또한 변경하고자 하는 레코드를 InnoDB 버퍼 풀로 읽어와야 하기 때문에 새롭게 디스크에서 읽어야 하는 데이터 페이지의 개수에
따라서 그만큼의 복호화 지연이 발생한다.

AES(Advanced Encryption Standarad) 암호화 알고리즘은 암호화하고자 하는 평문의 길이가 짧은 경우 암호화 키의 크기에 따라 암호화된 결과의 용량이 더 커질 수
도 있지만, 이미 데이터 페이지는 암호화 키보다 훨씬 크기 때문에 암호화 결과가 평문의 결과와 동일한 크기의 암호문을 반환한다. 그래서 TDE를 적용한다고 해도 데이
터 파일의 크기는 암호화되지 않은 테이블과 동일한 크기를 가진다. 즉 암호화한다고 해서 InnoDB 풀의 효율이 달라지거나 메모리 사용 효율이 떨어지는 현상은 발생
하지 않는다.

같은 테이블에 대해 암호화와 압축이 동시에 적용되면 MySQL 서버는 압축을 먼저 실행하고 암호화를 적용한다. 압축보다 암호화보다 먼저 실행되는 이유는 다음과 같다.

- 일반적으로 암호화된 결과문은 아주 랜덤한 바이트의 배열을 가지게 되는데, 이는 압출률을 상당히 떨어트린다.
- 압축된 데이터 페이지는 압축 또는 압축 해제의 모든 상태로 InnoDB 버퍼 풀에 존재할 수 있다. 

다음 표는 암호화된 테이블과 그렇지 않은 테이블의 디스크 읽고 쓰기에 걸리는 평균 시간을 수집한 정보다. 암호화된 테이블의 경우 읽기 3~5배 정도 느리며,
쓰기의 경우에는 5~6배 정도 느린 것을 확인 할 수 있다. 


암호화, 테이블명, 테이블 크기(GB), Read Latency(ms), Write Latency(ms)
No, table_1, 1.3, 0.56, 0.02
.., table_2, 2.7, 0.16, 0.02
.., table_3, 3.7, 0.49, 0.02
.., table_4, 106.6, 0.34, 0.02
.., table_5, 141.0, 0.25, 0.02
Yes, table_6, 2.0, 1.19, 0.11
.., table_7, 4.8, 1.50, 0.13
.., table_8, 206.5, 1.44, 0.12

select (sum(SUM_TIMER_READ) / SUM(COUNT_READ))/100000000 as avg_read_latency_ms,
       (sum(SUM_TIMER_WRITE) / sum(COUNT_WRITE)) / 100000000 as avg_write_latency_ms
from performance_schema.file_summary_by_instance
where FILE_NAME like '%DB_NAME/TABLE_NAME%';






































