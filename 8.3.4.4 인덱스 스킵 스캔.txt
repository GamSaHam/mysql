
데이터 베이스 서버에서 인덱스의 핵심은 값이 정렬돼 있다는 것이며, 이로 인해 인덱스를 구성하는 칸럼의 순서가 매우 중요하다. 예를 들어, employees 테이블에 다음과
같은 인덱스를 생성해보자.

mysql> ALTER TABLE employees  ADD INDEX ix_gender_birthdate(gender, birth_date);

이 인덱스를 사용하려면 where 조건에 gender 컬럼에 대한 비교 조건이 필수다.

-- // 인덱스를 사용하지 못하는 쿼리
mysql> select * from employees where birth_date >= '1965-02-01';

-- // 인덱스를 사용할 수 있는 쿼리
mysql> select * from employees where gender = 'M' and birth_date >= '1965-02-01';

두번째 쿼리에는 인덱스가 사용되지만, 두번째 조건은 인덱스를 사용할 수 없다.

주로 이런 경우에는 birth_date 칼럼부터 시작하는 인덱스를 새로 생성해야만 했다.

MySQL 8.0 버전부터는 옴티마이저가 gender 칼럼을 건너뛰어서 birth_date 칼럼만으로도 인덱스 검색이 가능하게 해주는 Index skip scan 최적화 기능이 도입됐다.
이전 버전에도 인덱스 스킵 스캔과 비슷한 최적화를 수행하는 Loose index scan 이라는 기능이 있었지만 루스 인덱스 스캔은 group by 작업을 처리하기 위해 인덱스를 사용하는
경우에만 적용할 수 있다.
하지만 MySQL 8.9 버전에 도입된 인덱스 스캡 스캔은 where 조건절의 검색을 위해 사용 가능하도록 용도가 훨씬 넓어진 것이다.

우선 인덱스 스킵 스캔 기능을 비활성화하고, MySQL 8.0 이전 버전에서는 어떤 실행 계획으로 처리됐는지를 한번 살펴보자.

mysql> explain select gender, birth_date from employees where birth_date >= '1965-02-01';
+----+-------------+-----------+------------+-------+---------------+---------------------+---------+------+--------+----------+--------------------------+
| id | select_type | table     | partitions | type  | possible_keys | key                 | key_len | ref  | rows   | filtered | Extra                    |
+----+-------------+-----------+------------+-------+---------------+---------------------+---------+------+--------+----------+--------------------------+
|  1 | SIMPLE      | employees | NULL       | index | NULL          | ix_gender_birthdate | 4       | NULL | 300584 |    33.33 | Using where; Using index |
+----+-------------+-----------+------------+-------+---------------+---------------------+---------+------+--------+----------+--------------------------+

위 실행 계획에서 type 칼럼이 "index"라고 표시된 것은 인덱스를 처음부터 끝까지 모두 읽었다(풀 인덱스 스캔)을 의미이므로 인덱스를 비효율적으로 사용한 것이다.

이 예제 쿼리는 인덱스에 있는 gender 칼럼과 birth_date 칼럼만 있으면 처리를 완료할 수 있기 때문에 ix_gender_birthdate 인덱스를 풀 스캔한 것이다.
만약 예제 쿼리가 employees 테이블의 모든 칼럼을 가져와야 했다면 테이블 풀 스캔을 실행했을 것이다.
mysql> explain select * from employees where birth_date >= '1965-02-01';
+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |
+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
|  1 | SIMPLE      | employees | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 300584 |    33.33 | Using where |
+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+
1 row in set, 1 warning (0.00 sec)


MySQL 8.0 버전 도입된 인덱스 스킵 스캔을 활성화 하면

set optimizer_switch='skip_scan=on';

mysql> explain select gender, birth_date from employees where birth_Date >= '1965-02-01';
id, table, type, key, Extra
1, employees, range, ix_gender_birthdate, Using where; Using index for skip scan

type 칼럼의 값이 "range"로 표시됐는데 이는 인덱스에서 꼭 필요한 부분만 읽었다는 것을 의미한다. Extra 칼럼에 "Using index for skip scan" 이라는 문구가 표시됐는데,
ix_gender_birthdate 인덱스에 대해 인덱스 스킵 스캔을 활용해 데이터를 조회했다는 것을 의미한다. 

옵티마이저는 내부적으로 아래 2개의 쿼리를 실행하는 것과 비슷한 형태의 최적화를 실행하게 된다.







