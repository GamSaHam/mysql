MySQL 서버에서 디스크에 저장된 데이터 파일의 크기는 일반적으로 쿼리의 처리 성능과도 직결되지만 백업 및 복구 시간과도 밀접하게 연결된다.
디스크의 데이터 파일이 크면 클수록 쿼리를 처리하기 위해서 더 많은 데이터 페이지를 InnoDB 버퍼 푸로 읽어야 할 수도 있고, 
새로운 페이지가 버퍼 풀로 적재되기 때문에 그만큼 더티 페이지가 더 자주 디스크로 기록돼야 한다. 그리고 데이터 파일이 크면 클수록 백업
시간이 오래 걸리며, 복구하는 데도 그만큼의 시간이 걸린다. 물론 그만큼의 저장 공간이 필요하기 때문에 비용 문제도 있을 수 있다. 
MySQL 서버에서 사용 가능한 압축 방식은 크게 테이블 압축과, 페이지 압축 두가지 종류로 구분할 수 있는데, 두 방식 매우 다르게 작동하므로
하나씩 구분해서 살펴보자.

6.1 페이지 압축
페이지 압축은 "Transparent Page Compression"이라고도 불리는데, MySQL 서버가 디스크에 저장하는 시점에 데이터 페이지가 압축되어 저장되고, 반대로
MySQL 서버가 디스크에서 데이터 페이지를 읽어올 때 압축이 해제되기 때문이다. 


1. 16KB 페이지를 압축(압축 결과를 7BK로 가정)
2. MySQL 서버는 디스크에 압축된 결과 7KB를 기록
   (이때 MySQL 서버는 압축 데이터 7KB에 9KB의 빈 데이터를 기록)
3. 디스크에 데이터를 기록한 후, 7KB 이후의 공간 9KB에 대해 (Punch-hole)을 생성
4. 파일 시스템은 7KB만 남기고 나머지 디스크의 9KB 공간은 다시 운영체제로 반납

그런데 MySQL 서버의 페이지 압축이 가진 문제는 펀치 홀 기능 운영체제뿐만 아니라 하드웨어 자체에서도 해당 기능을 지원해야 사용 가능하다는 점이다. 

이러한 이유로 실제 페이지 압축은 많이 사용되지 않는 상태다. 

6.2 테이블 압축
테이블 압축은 운영체제나 하드웨어에 대한 제약 없이 사용할 수 있기 때문에 일반적으로 더 활용도가 높은 편이다. 테이블 압축은 우선 디스크의 데이터 파일 크기를
줄일 수 있기 때문에 그만큼의 이득이 있다. 하지만 테이블 압축도 몇 가지 단점이 있다.

- 버퍼 풀 공간 활용률이 낮음
- 쿼리 처리 성능이 낮음
- 빈번한 데이터 변경 시 압축률이 떨어짐

6.2.1 압축 테이블 생성
테이블 압축을 사용하기 위한 전제 조건으로 압축을 사용하려는 테이블이 별도의 테이블 스페이스를 사용해야 한다. 이를 위해서는 innodb_file_per_table 시스템 
변수가 ON으로 설정된 상태에서 테이블이 생성돼야 한다. 

SET GLOBAL innodb_file_per_table = ON;

CREATE TABLE compressed_table (
    ...
)
ROW_FORMAT = COMPRESSED
KEY_BLOCK_SIZE=8;

-- KEY_BLOCK_SIZE 옵션만 명시
CREATE TABLE compressed_table (
    ...
)
KEY_BLOCK_SIZE=8;

InnoDB 스토리지 엔진이 압축을 적용하는 방법을 한번 살펴보자

