기본적으로 B-Tree 인덱스의 특성상 다음 조건에서는 사용할 수 없다. 범위 결정 조건으로 사용할 수 없다는 것을 의미하며, 경우에 따라서는 체크 조건으로 인덱스
를 사용할 수는 있다.

- NOT-EQUAL로 비교된 경우("<>", "NOT IN", "NOT BETWEEN", "IS NOT NULL")
where column <> "N"
where column not in (10, 11, 12)
where column is not null

- like '%??' (앞부분이 아닌 뒷부분 일치) 형태로 문자열 패턴이 비교된 경우
where column like '%승환'
where column like '_승환'
where column like '%승%'

- 스토어드 함수나 다른 연산자로 인덱스 칼럼이 변형된 후 비교된 경우
where substring(column, 1,1) = 'X'
where dayofmonth(column) = 1

- not-deterministic 속성의 Stored Function가 비교 조건에 사용된 경우
where column = deterministic_function()

- 데이터 타입이 서로 다른 비교(인덱스 칼럼의 타입을 변환해야 비교가 가능한 경우)
where char_column = 10

- 문자열 데이터 타입의 콜레이션이 다른 경우
where utf8_bin_char_column = euckr_bin_char_column

일반적인 DBMS에서는 null 값이 인덱스에 저장되지 않지만 MySQL에서는 null 값도 인덱스에 저장된다.

mysql> ... where column is null ...

다중 칼럼으로 만들어진 인덱스는 어떤 조건에 사용될수 있고, 어떤 경우에 절대 사용할 수 없는지 살펴보자

index ix_test (column_1, column_2, column_3, column_4, ..., column_n)

- 작업 범위 결정 조건으로 인덱스를 사용하지 못하는 경우
    column_1 칼럼에 대한 조건이 없는 경우
    column_1 칼럼의 비교 조건이 위의 인덱스 사용 불가 조건 중 하나인 경우

- 작업 범위 결정 조건으로 인덱스를 사용하는 경우(i는 2보다 크고 n보다 작은 임의의 값을 의미)
    column_1 ~ column_(i-1) 칼럼까지 동등 비교 형태("=" 또는 "IN")로 비교
    column_i 칼럼에 대해 다음 연산자 중 하나로 비교
    - 동등 비교("=" 또는 "IN")
    - 크다 작다 형태(">" 또는 "<")
    - like로 좌측 일치 패턴(like '승환%')

위의 두 가지 조건을 모두 만족하는 쿼리는 column_1 부터 column_i 까지는 작업 범위 결정 조건으로 사용되고, column_(i+1) 부터 column_n 까지의
조건은 체크 조건으로 사용된다.

-- // 다음 쿼리는 인덱스를 사용할 수 없음
mysql> .. where column_1 <> 2

-- // 다음 쿼리는 column_1과 column_2까지 범위 결정 조건으로 사용됨
mysql> .. where column_1 and column_2 > 10

-- // 다음 쿼리는 column_1, column_2, column_3까지 범위 결정 조건으로 사용됨
mysql> .. where column_1 in (1,2) and column_2 = 2 and column_3 <= 10

-- // 다음 쿼리는 column_1, column_2, column_3까지 범위 결정 조건으로,
-- // column_4는 체크 조건으로 사용됨
mysql> .. where column_1 = 1 and column_2 = 2 and column_3 in (10, 20, 30) and column_4 <> 100

-- // 다음 쿼리는 column_1, column_2, column_3, column_4까지 범위 결정 조건으로 사용됨
-- // 좌측 패턴 일치 like 비교는 크다 또는 작다 비교와 동급으로 생각하면 됨
mysql> .. where column_1 = 1 and column_2 in (2,4) and column_3 = 30 and column_4 like '김승%'

-- // 다음 쿼리는 column_1, column_2, column_3, column_4, column_5 칼럼까지
-- // 모두 범위 결정 조건으로 사용됨
mysql> .. where column_1 = 1 and column_2 and column_3 = 30 and column_4 = '김승환' and column_5 = '서울'

여기서 설명한 내용은 모두 B-Tree 인덱스의 특징이므로 MySQL뿐 아니라 대부분의 RDBMS에도 동일하게 적용된다.


























