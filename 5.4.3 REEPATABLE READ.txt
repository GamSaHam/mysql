REPEATABLE READ는 MySQL의 InnnoDB 스토리지 엔진에서 기본으로 사용되는 격리 수준이다. 
바이너리 로그를 가진 MySQL 서버에서는 최소 REPEATABLE READ 격리 수준 이상을 사용해야 한다.
이 격리 수준에서는 REEAD COMMITTED 격리 수준에서 발생하는 "NON-REPEATABLE READ" 부정합이 발생하지 않는다.
InnoDB 스토리지 엔진은 트랜잭션이 ROLLBACK될 가능성에 대비해 변경되기 전 레코드를 언두(Undo) 공간에 백업해두고 실제 레코드 값을 변경한다.
이러한 변경 방식을 MVCC(4.2.3)라고 하며, REPEATABLE READ는 이 MVCC를 위해 언두 영역에 백업된 이전 데이터를 이용해 동일 트랜잭션 내에서는 동일한 결과를
보여줄 수 있게 보장한다. 사실 READ COMMITTED도 MVCC를 이용해 COMMIT되기 전의 데이터를 보여준다. 
REPEATABLE READ와 READ COMMITTED의 차이는 언두 영역에 백업된 레코드의 여러 버전 가운데 몇 번째 이전 버전까지 찾아 들어가냐 하느냐에 있다.

모든 InnoDB의 트랜잭션은 고유한 트랜잭션 번호(순차적으로 증가하는 값)를 가지며, 언두 영역에 백업된 모든 레코드에는 변경을 발생시킨 트랜잭션의
번호가 포함돼 있다. 언두 영역의 백업된 데이터는 InnoDB 스토리지 엔진이 불필요하다고 판단하는 시점에 주기적으로 삭제한다. REPEATABLE READ 격리 수준에서는
MVCC를 보장하기 위해 실행 중인 트랜잭션 가운데 가장 오래된 트랜잭션 번호보다 트랜잭션 번호가 앞선 언두 영역의 데이터는 삭제할 수가 없다. 

사용자 B
begin(trx-id: 10)

select ... where emp_no = 2
결과 1건(Lara)

emploees
trx-id, emp_no, first_name
6, 1, Francesca
6, 2, Lara

사용자 A
begin(trx-id: 12)

update set first_name = 'Toto';

emplyees
trx-id, emp_no, first_name
6, 1, Francesca
12, 2, Toto

언두로그
6, 2, Lara

cimmit (trx-id: 12)

사용자 B
employees

select ... where emp_no = 2
결과 1건 (Lara)
언두 로그에 있는 정보를 가지고 온다.

emplyees
trx-id, emp_no, first_name
6, 1, Francesca
12, 2, Toto

언두로그
6, 2, Lara

사용자 A는 트랜잭션 번호는 12였으며 사용자 B의 트랜잭션 번호는 10이 였다. 이때 사용자 A는 사원의 이름을 "Toto"로 변경하고 커밋을 수행했다.
사용자 B는 BEGIN 명령으로 트랜잭션을 시작하면 10번이라는 트랜잭션을 번호를 부여 되는데 그때 부터 사용자 B의 10번 트랜잭션 안에서 실행되는 모든 select
쿼리는 트랜잭션 번호가 10(자신의 트랜잭션 번호) 보다 작은 트랜잭션 번호에서 변경한 것만 보게 된다.

위에서는 언두 영역에 백업된 데이터가 하나만 있는 것으로 표현했지만 사실 하나의 레코드에 대해 백업이 하나 이상 얼마든지 존재할 수 있다. 한 사용자가
BEGIN으로 트랜잭션을 시작하고 장시간 트랜잭션을 종료하지 않으면 언두 영역이 백업된 데이터로 무한정 커질 수도 있다. 이렇게 언두에 백업된 레코드가 많아지면
MySQL 서버의 처리 성능이 떨어질 수 있다.

REPEATABLE READ 격리 수준에서도 다음과 같은 부정합이 발생할 수 있다.

사용자 B
begin(trx-id: 10)
select ... where emp_no >= 2 for update
결과 1건 반환

employees
trx-id, emp_no, first_name
6, 1, Francesca
6, 2, Lara

사용자 A
begin(trx-id: 12)

employees
trx-id, emp_no, first_name
6, 1, Francesca
6, 2, Lara
12, 3, Georgi

commit

사용자 B
select where emp_no > 2 for update
결과 2건 반환

employees
trx-id, emp_no, first_name
6, 1, Francesca
6, 2, Lara
12, 3, Georgi

이렇게 다른 트랙잭션에서 수행한 변경 작업에 의해 레코드가 보였다 안 보였다 하는 현상을 PHANTOM READ(또는 PHANTOM ROW)라고 한다. 
SELECT ... FOR UPDATE 쿼리는 SELECT하는 레코드에 쓰기 잠금을 걸어야 하는데, 언두 레코드에는 잠금을 걸 수 없다. SELECT ... FOR UPDATE 
나 SELECT ... LOCK IN SHARE MODE 로 조회되는 레코드는 언두 영역의 변경 전 데이터를 가지 오는 것이 아니라 현재 레코드의 값을 가지고 오게 되는 것이다.

생각) FOR UPDATE 항목은 의미 상으로도 잘안쓰게 되는 항목일듯 강제적으로 다른 클라이언트들의 접속을 대기 시키기 때문에















