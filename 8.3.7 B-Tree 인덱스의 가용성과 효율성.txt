
쿼리의 where 조건이나 group by, 또는 order by 절이 어떤 경우에 인덱스를 사용할 수 있고 어떤 방식으로 사용할 수 있는지 식별할 수 있어야 한다. 그래야만 쿼리의
조건을 최적화하거나, 역으로 쿼리에 맞게 인덱스를 최적으로 생성할 수 있다. 또한 인덱스를 100% 활용할 수 있는지, 일부만 이용하게 되는지도 함께 살펴 보겠다.

8.3.7.1 비교 조건 종류와 효율성
다중 칼럼 인덱스에서 각 칼럼의 순서와 그 칼럼에 사용된 조건이 동등 비교(=) 인지 아니면 크다(>)또는 작다(<) 같은 범위 조건인지에 따라 각 인덱스 칼럼의 활용 형태가
달라지며, 그 효율 또한 달라진다.

select * from dept_emp where dept_no = 'd002' and emp_no >= 10114;

이 쿼리에 dep_emp 테이블에 인덱스를 생성했다고 가정하자

- 케이스 A: index(dept_no, emp_no)
- 케이스 B: index(emp_no, dept_no)

케이스 A 인덱스는 "dept_no='d002' AND emp_no >= 10144" 인 레코드를 찾고 그 이후에는 dept_no 가 'd002'가 아닐 때까지 인덱스를 그냥 쭉 읽기만 하면 된다.
즉 조건에 만족하는 레코드가 5건이라고 할때, 5건의 레코드를 찾는 데 꼭 필요한 5번의 비교 작업만 수행한것이므로 상당히 효율적으로 인덱스를 이용한 것이다.
하지만 케이스 B인덱스는 우선 "emp_no >= 1044 AND dept_no='d002'"인 레코드를 찾고, 그 이후 모든 레코드에 대해 dept_no가 'd002'인지 비교하는 과정을 거쳐야 한다.

인덱스 리프 노드
(dept_no, emp_no)

페이지 번호 6
dept_no, emp_no
d002, 10059
d002, 10090
d002, 10132
d002, 10144 1
d002, 10146 2

페이지 번호
dept_no, emp_no
d002, 10147 3
d002, 10165 4
d002, 10173 5
d003, 10005
d003, 10013

d002, 10144 조건이 만족하여 읽고 d003이 전 까지 데이터를 읽는다.

인덱스 리프 노드
(emp_no, dept_no)

페이지 번호 6
emp_no, dept_no
10059, d002
10080, d002
10132, d002
10144, d002 1
10146, d002 2

페이지 번호 7
emp_no, dept_no
10147, d002 3
10165, d002 4
10173, d002 5
10239, d001 6
10259, d001 7

그림 8.17 인덱스의 칼럼 순서로 인한 쿼리 실행 내역의 차이


케이스 B 인덱스는 케이스 A와 다르게 7번의 비교 과정을 거친다. 그림 8.13 '다중 칼럼 인덱스' 에서 설명한 다중 칼럼 인덱스의 정렬 방식 (인덱스의 N번째 키 값은
N-1번째 키 값에 대해서 다시 정렬됨) 때문이다. 

공식적인 명칭은 아니지만 케이스 A와 같이 작업의 범위를 결정하는 조건을 '작업 범위 결정 조건'이라 하고 케이스 B 인덱스의 dept_no = 'd002' 조건과 같이 비교 작업의
범위를 줄이지 못하고 단순히 거름종이 역할만 하는 조건을 '필터링 조건' 또는 '체크 조건'이라고 표현한다. 케이스 B인덱스에서는 emp_no 칼럼만 '작업 범위 결정 조건'이고
dep_no 칼럼은 '필터링 조건'으로 사용된 것이다. 작업 범위를 결정하는 조건은 많으면 많을수록 쿼리의 처리 성능을 높이지만 체크 조건은 많다고 해서 쿼리 처리 성능을
높이지는 못한다.

8.3.7.2 인덱스의 가용성
B-Tree 인덱스의 특징은 왼쪽 값에 기준해서(Left-most) 오른쪽 값이 정렬돼 있다는 것이다. 여기서 왼쪽이란 하나의 칼럼 내에서뿐만 아니라 다중 칼럼 인덱스의 칼럼에
대해서도 함께 적용된다.

케이스 A: INDEX(first_name)
케이스 B: INDEX(dept_no, emp_no)

인덱스 페이지
(first_name)
페이지 번호 4
first_name
A a mer
A a mod
A b delziz
A b delghani

페이지 번호 5
first_name
A b delkader
A b delwaheb
A b dulah
A b dulla
A b hilleas

인덱스 페이지
(dept_no, emp_no)

페이지 번호 5
dept_no, emp_no
d001, 10239
d001, 10259
d002, 10042
d002, 10050

페이지 번호 6
dept_no, emp_no, 주소
d002, 10059
d002, 10080
d002, 10132
d003, 10005
d003, 10013

그림 8.18

mysql> select * from employees where first_name like '%mer';

조건 절에 주어진 상숫값 %mer 에는 왼쪽 부분이 고정되지 않았기 때문에 인덱스 레인지 스캔 방식으로 인덱스를 이용할 수 없다.

mysql> select * from dept_no where emp_no >= 10144;

인덱스가 (dept_no, emp_no) 칼럼 순서대로 생성돼 있다면 인덱스의 선행 칼럼인 dept_no 조건 없이 emp_no 값으로만 검색하면 인덱스를 효율적으로 사용할 수 없다.
케이스 B의 인덱스는 다중 칼럼으로 구성된 인덱스이므로 dept_no 칼럼에 대해 먼저 정렬한 후, 다시 emp_no 칼럼값으로 정렬돼 있기 때문이다.

where 조건절에 대한 내용만 언급했지만 인덱스의 왼쪽 값 기준 규칙은 group by 절이나 order by 절에도 똑같이 적용된다. 









