
InnoDB 스토리지 엔진의 리두 로그는 리두 로그 공간의 낭비를 막기 위해 페이지의 변경된 내용만 기록한다.
이로 인해 InnoDB의 스토리지 엔진에서 더티 페이지를 디스크 파일로 플러시할 때 일부만 기록되는 문제가 발생하면 그
페이지의 내용은 복구할 수 없을 수도 있다. 이렇게 페이지가 일부만 기록되는 현상을 파셜 페이지(Partial-page) 또는 톤 페이지
(Torn-page) 라고 하는데, 이런 현상은 하드웨어의 오작동이나 시스템의 비정상 종료 등으로 발생할 수 있다.

Double-Write 기법을 사용한다. (1. 변경된 데이터 페이지를 모아서 한번에 기록)

InnoDB 버퍼 풀 (데이터 페이지를 개별로 파일로 기록)
데이터 파일
DoubleWrite 버퍼(시스템 테이블스페이스)

A, B는 정상적으로 기록되었지만 C페이지가 기록 되는 도중에 운영체제가 비정상적으로 종료됐다고 가정해보자
그러면 InnoDB 스토리지 엔진을 재시작할 때 항상 DoubleWrite 버퍼의 내용과 데이터 파일의 페이지들을 모두 비교해서 
다른 내용을 담고 있는 페이지가 있으면 DoubleWrite 버퍼의 내용을 데이터 파일의 페이지로 복사한다. DoubleWrite 기능을
사용할지 여부는 innodb_doublewrite 시스템 변수로 제어할 수 있다.

DoubleWrite 버퍼는 데이터의 안정성을 위해 자주 사용되는데, HDD처럼 자기 원판(Platter) 의 회전하는 저장 시스템 에서는
어차피 한 번의 순차 디스크 쓰기를 하는 것이기 때문에 별로 부담이 되지 않지만 ssd 처럼 랜덤 IO나 순차 IO의 비용이
비슷한 저장 시스템에서는 상당히 부담스럽다. 하지만 데이터의 무결성이 매우 중요한 서비스에서는 DoubleWrite의 활성화
를 고려하는 것이 좋다.

4.2.9 언두 로그
InnoDB 스토리지 엔진은 트랜잭션과 격리 수준을 보장하기 위해 DML(INSERT, UPDATE, DELETE)로 변경되기 이전 버전의 데이터를
 별도로 백업한다. 

- 트랜잭션 보장
    트랜잭션이 롤백되면 트랜잭션 도중 변경된 데이터를 변경 전 데이터로 복구해야 하는데, 이때 언두 로그에 백업해둔 이전 
    버전의 데이터를 이용해 복구한다.

- 격리 수준 보장
    특정 커넥션에서 데이터를 변경하는 도중에 다른 커넥션에서 데이터를 조회하면 트랜잭션 격리 수준에 맞게 변경중인 레코드
    를 읽지 않고 언두 로그에 백업해둔 데이터를 읽어서 반환하기도 한다.

언두 로그는 InnoDB 스토리지 엔진에서 매우 중요한 역할을 담당하지만 관리 비용도 많이 필요하다.

mysql> update member set name = '홍길동' where member_id = 1;

커밋을 하지않아도 인덱서 버퍼의 내용은 '홍길동' 으로 변경된다. 언두 영역에는 '벽계수'라는 값이 백업되어 있다.
커밋을 하면 현재 상태가 유지되고, 롤백하면 언두 영역의 백업된 데이터를 다시 데이터 파일로 복구한다.














