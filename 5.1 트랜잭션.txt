MySQL의 동시성에 영향을 미치는 잠금(Lock)과 트랜잭션, 트랜잭션의 격리 수준(Isolation level)을 살펴보겠다.

트랜잭션은 작업의 완전성을 보장해 주는 것이다. 즉 논리적인 작업 셋을 모두 완벽하게 처리하거나, 처리 못할 경우에는 원 상태로 복구해서 작업의 일부만 적용
되는 현상 (Partial update)이 발생하지 않게 만들어주는 기능이다.

잠금(Lock)과 트랜잭션은 서로 비슷한 개념 같지만 잠금은 동시성을 제어하기 위한 기능이고 트랜잭션은 데이터의 정합성을 보장하기 위한 기능이다.
하나의 회원 정보 레코드를 여러 커넥션에서 잠금이 없다면 하나의 데이터를 여러 커넥션이 동시에 변경할 수 있게 된다.

결과적으로 해당 레코드의 값은 예측 할 수 없는 상태가 된다. 

격리 수준이라는 것은 하나의 트랙잭션 내에서 또는 여러 트랜잭션 간의 작업 내용을 어떻게 공유하고 차단할 것인지를 결정하는 레벨을 의미한다.

MyISAM이나 MEMORY 같은 트랙잭션을 지원하지 않는 스토리지 엔진의 테이블이 더 많은 고민거리를 만들어 낸다.

이번 절에서는 트랙잭션을 지원하지 않는 MyISAM과 트랜잭션을 지원하는 InnoDB의 처리 방식 차이를 잠깐 살펴보고자 한다.

5.1.1 MySQL에서의 트랜잭션
트랜잭션은 하나의 논리적인 작업 셋에 하나의 쿼리가 있든 두 개 이상의 쿼리가 있든 관계없이 논리적인 작업 셋 자체가 100% 적용되거나 아무것도 적용되지
않아야 함을 보장해 주는 것이다.

간단한 예제로 트랜잭션 관점에서 InnoDB 테이블과 MyISAM 테이블의 차이를 살펴보자.

## show databases ;
#
# use employees;
#
# CREATE TABLE tab_myisam(fdpk INT NOT NULL, PRIMARY KEY (fdpk)) ENGINE=MyISAM;
#
# insert into tab_myisam (fdpk) values(3);
#
#
# select * from tab_myisam;
#
# create table tab_innodb (fdpk int not null, primary key (fdpk)) engine = innodb;
#
# insert into tab_innodb(fdpk) values(3);
#
# select * from tab_innodb;
#
# set autocommit  = on;

insert into tab_myisam values(1),(2),(3);
insert into tab_innodb values(1),(2),(3);

select * from tab_myisam;
select * from tab_innodb;

mysql> select * from tab_myisam;
+------+
| fdpk |
+------+
|    1 |
|    2 |
|    3 |
+------+
3 rows in set (0.00 sec)

mysql> select * from tab_innodb;
+------+
| fdpk |
+------+
|    3 |
+------+

그런데 두 테이블의 레코드를 조회해 보면 MyISAM 테이블에는 오류가 발생했음에도 '1'과 '2'는 INSERT된 상태로 남아있다.

InnoDB는 쿼리 중 일부라도 오류가 발생하면 전체를 원 상태로 만든다는 트랙잭션의 원칙대로 INSERT 문장을 실행하기 전 상태로 그대로 복구했다.
MyISAM 테이블에서 발생하는 이러한 현상을 부분 업데이트(Partial Update)라고 표현하며, 이러한 부분 업데이트 현상은 테이블 데이터의 정합성을 맞추는데
상당히 어려운 문제를 만들어 낸다. 

트랜잭션은 애플리케이션 개발에서 고민해야 할 문제를 줄여주는 아주 필수적인 DBMS 기능이다.

1) 처리 시작
2) 사용자의 로그인 여부 확인
3) 사용자의 글쓰기 내용의 오류 발생 여부 확인
4) 첨부로 업로드된 파일 확인 및 저장
    => 데이터베이스 커넥션 생성(또는 커넥션 풀에서 가져오기)
    => 트랜잭션 시작
5) 사용자의 입력 내용을 DBMS에 저장
6) 첨부 파일 정보를 DBMS에 저장
    <= 트랜잭션 종료
7) 저장된 내용 또는 기타 정보를 DBMS에서 조회
8) 게시물 등록에 대한 알림 메일 발송
    => 트랜잭션 시작
9) 알람 메일 발송 이력을 DBMS에 저장
    <= 트랜잭션 종료(COMMIT)
    <= 데이터베이스 커넥션 종료(또는 커넥션 풀에 반납)
10) 처리 완료

여기서 설명하려는 바는 프로그램의 코드가 데이터베이스 커넥션을 가지고 있는 범위와 트랙잭션이 활성화돼 있는 프로그램의 범위를 최소화해야 한다는 
것이다. 네트워크 작업이 있는 경우에는 반드시 트랜잭션에서 배제해야 한다. 
이런 실수로 인해 DBMS 서버가 높은 부하 상태로 빠지거나 위험한 상태로 빠지는 경우가 빈번히 발생한다.












