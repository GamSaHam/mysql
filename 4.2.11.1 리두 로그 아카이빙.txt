
ACID는 데이터베이스에서 트랙잭션의 무결성을 보장하기 위해 꼭 필요한 4가지 요소(기능)를 의미한다.

A Atomic 트랜잭션은 원자성 작업이어야 함을 의미한다. 
    - 성공 또는 실패여야 한다.

C Consistent의 첫글자로 일관성을 의미한다.
    - 재고를 10을 감소시키면 10이 감소되어야 한다.
    - 외래키가 잡힐 경우 주문 제품 ID가 제품 ID와 항상 일치해야 합니다.

I Isolation 의 격리성을 의미한다.
    - 호텔 예약 시스템에서 한 객실에 여러명이 객실을 예약할려고 합니다. 격리성을 유지하면
    한 객실이 동시에 여러 고객에게 예약되지 않습니다.

D Durable의 지속성이며, 한번 저장된 데이터는 지속적으로 유지되어야 함을 의미한다.
    - 시스템이 종료되도 커밋된 데이터는 손실이 되지 않아야 한다.


4.2.11.2 리두 로그 활성화 및 비활성화
- InnoDB 스토리지 엔진의 리두 로그는 하드웨어나 소프트웨어 등 여러 가지 문제점으로 MySQL 서버가 비정상적으로 종료됐을 때 데이터 파일에
기록되지 못한 트랜잭션을 복구하기 위해 항상 활성화

SHOW VARIABLES LIKE 'innodb_flush_log_at_trx_commit';
5.7에서는 동작안함

일반적으로 인덱스라고 하면 이는 테이블에 사용자가 생성해둔 B-Tree 인덱스를 의미한다. 어탭티브 해시 인덱스(Adaptive Hash Index)는
사용자가 수동으로 생성하는 인덱스가 아니라 InnoDB 스토리지 엔진에서 사용자가 자주 요청하는 데이터에 대해 자동으로 생성하는 인덱스이며,
사용자는 innodb_adaptive_hash_index 시스템 변수를 이용해서 어댑티브 해시 인덱스 기능을 활성화하거나 비활성화 할 수 있다.

B-Tree 인덱스에서 특정 값을 찾는 과정은 매우 빠르게 처리된다고 많은 사람이 생각한다. 하지만 빠르냐 느리냐의 기준은 상대적인 것이며,
데이터베이스 서버가 얼마나 많은 일을 하느냐에 따라 B-Tree 인덱스에서 값을 찾는 과정이 느려질 수 있고 빨라 질 수 있다.
적당한 사양의 컴퓨터에서 이런 작업을 동시에 몇 개 실행한다고 해서 성능 저하가 보이지는 않을 것이다. 하지만 이런 작업을 동시에
몇 천 개의 스레드로 실행하면 컴퓨터의 CPU는 엄청난 프로세스 스케줄링을 하게 되고 자연히 쿼리의 성능이 떨어진다.

어댑티브 해시 인덱스는 이러한 B-Tree 검색 시간을 줄여주기 위해 도입된 기능이다.
InnoDB 스토리지 엔진은 자주 읽히는 데이터 페이지의 키 값을 이용해 해시 인덱스를 만들고, 필요할 때마다 어댑티브 해시 인덱스를 검색해서
레코드가 저장된 데이터 페이지를 즉시 찾을 수 있다. B-Tree를 루트 노드부터 리프노드 까지 찾아가는 비용이 없어지고 그만큼 CPU는 적은 일을 
하고 쿼리의 성능은 빨라지고 더 많은 쿼리를 동시에 처리 할 수 있다.

해시 인덱스는 '인덱스 키 값'과 해당 인덱스 키 값이 저장된 '데이터 페이지 주소'의 쌍으로 관리되는데, B-Tree 인덱스의 고유번호와
B-Tree 인덱스의 실제 키 값 조합으로 생성된다. B-Tree 인덱스에 대한 어댑티브 해시 인덱스가 하나의 해시 인덱스에 저장되며, 특정 키 값이
어느 인덱스에 속한 것인지도 구분해야 하기 때문이다. 그리고 '데이터 페이지 주소'는 실제 키 값이 저장된 데이터 페이지의 메모리 주소를
가지는데, 이는 InnoDB 버퍼 풀로 로딩된 페이지의 주소를 의미한다. 그래서 어댑티브 해시 인덱스는 버퍼 풀에 올려진 데이터 페이지에 
대해서만 관리되고, 버퍼 풀에서 해당 데이터 페이지가 없어지면 어댑티브 해시 인덱스에서도 해당 페이지의 정보는 사라진다.

데이터 페이지의 메모리 주소를 가지는데, 이는 InnoDB 버퍼 풀에 로딩된 페이지의 주소를 의미한다. 어댑티브 해시 인덱스는 버퍼 풀에
올려진 데이터 페이지에 대해서만 관리되고, 버퍼 풀에서 해당 데이터 페이지가 없어지면 어댑티브 해시 인덱스에서도 정보는 사라진다.

어댑티브 해시 인덱스가 보여줄 수 있는 성능 효과를 그래프로 잠시 살펴보자

단순한 쿼리를 MySQL 서버가 최다한 처리할 수 있는 수준까지 실행하는 상태에서 어댑티브 해시 인덱스를 활성화했을 댸의 변화를 보여준다.
mysql> SELECT fd1 FROM tab WHERE idx_fd2 IN (?,?,?,?, ...);

어댑티브 해시 인덱스가 활성화 되지 않았을 때는 초당 20,000개 정도의 쿼리를 처리하면서 CPU 사용률은 100%였다. 그런데 어댑티브 해시 인덱스
를 활성화한 후 쿼리의 처리량은 2배 가까이 늘어났음에도 불구하고 CPU의 사용률은 오히려 떨어졌다. B-Tree의 루트 노드부터 검색이 많이
줄면서 InnoDB 내부 잠금(세마포어)의 횟수도 획기적으로 줄어든다.

예전 버전까지는 어댑티브 해시 인덱스는 하나의 메모리 객체인 이유로 어댑티브 해시 인덱스의 경합이 강했다. 어댑티브 해시 인덱스의 
파티션 기능을 제공한다. innodb_adaptive_hash_index_parts 시스템 변수를 이요해 파티션 개수를 변경할 수 있는데, 기본값은 8개이다.

어댑티브 해시 인덱스가 성능 항상에 크게 도움이 되지 않은 경우
- 디스크 읽기가 많은 경우
- 특정 패턴의 쿼리가 많은 경우(조인이나 LIKE 패턴 검색)
- 매우 큰 데이터를 가진 테이블의 레코드를 폭넓게 읽는 경우

다음과 같은 경우는 성능 향상에 많은 도움이 된다.
- 디스크의 데이터가 InnoDB 버퍼 풀 크기와 비슷한 경우(디스크 읽기가 많지 않은 경우)
- 동등 조건 검색(동등 비교와 IN 연산자)이 많은 경우
- 쿼리가 데이터 중에서 일부 데이터만 집중되는 경우

데이터 페이지를 디스크에서 읽어오는 경우가 빈번한 데이터베이스 서버에서는 아무런 도움이 되지 않는다. 

mysql> ALTER TABLE employees ADD address VARCHAR(200), ALGORITHM=INSTANT;

어댑티브 해시 인덱스의 도움을 많이 받을수록 테이블 삭제 또는 변경 작업(Online DDL 포함)은 더 치명적인 작업이 되는 것이다. 

mysql> SHOW ENGINE INNODB STATUS\G;

-------------------------------------
INSERT BUFFER AND ADAPTIVE HASH INDEX
-------------------------------------
Ibuf: size 1, free list len 210, seg size 212, 0 merges
merged operations:
 insert 0, delete mark 0, delete 0
discarded operations:
 insert 0, delete mark 0, delete 0
Hash table size 2267, node heap has 0 buffer(s)
Hash table size 2267, node heap has 0 buffer(s)
Hash table size 2267, node heap has 0 buffer(s)
Hash table size 2267, node heap has 0 buffer(s)
Hash table size 2267, node heap has 0 buffer(s)
Hash table size 2267, node heap has 0 buffer(s)
Hash table size 2267, node heap has 0 buffer(s)
Hash table size 2267, node heap has 0 buffer(s)
0.00 hash searches/s, 0.00 non-hash searches/s
---

