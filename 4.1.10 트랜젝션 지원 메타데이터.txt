데이터베이스 서버에서 테이블의 구조 정보와 스토어드 프로그램 등의 정보를 데이터 딕셔녀리 또는
메타데이터라고 하는데, MySQL 서버는 5.7 버전까지 테이블 구조를 FRM 파일에 저장하고 일부 스토어드
프로그램 또는 파일(*.TRN, *.TRG, *.PAR, ...) 기반으로 관리한다. 
하지만 이러한 파일기반 메타데이터 생성 및 변경 작업이 트랜잭션을 지원하지 않기 때문에
테이블의 생성 또는 변경 도중 MySQL 서버가 비정상적으로 종료되면 일관되지 않은 상태로
남는 문제가 있었다. 많은 사용자들은 이 현승을 가리켜 '데이터베이스나 테이블이 깨졌다' 라고 표현한다.

MySQL 8.0 버전부터 데이터 딕셔너리와 시스템 테이블 모두 트랜잭션 기반의 InnoDB 스토리지 엔진에 저장되도록 개선되면서
이제 스키마 변경 작업 중간에 MySQL 서버가 비정상적으로 종료된다고 하더라도 스키마 변경이 완전한 성공 또는 완전한 실패로 정리된다.

파일 기반 메타데이터를 사용할 때와 같이 작업 진행 중인 상태로 남으면서 문제를 유발하지 않게 개선된 것이다.

mysql_schema.json 은 window 개발환경에는 존재하지 않는다.

4.2 InnoDB 스토리지 엔진 아키텍처

[MySQL 엔진] SQL 옵티마이저, SQL 실행기
-> [InnoDB 스토리지 엔진] 어댑티브 해시 인덱스, (InnoDB 버퍼 풀) 언두 페이지, 데이터 페이지 버퍼, 체인지 버퍼, (로그 버퍼)

-> [백그라운드 스레드] 체인지버퍼 머즈 스레드, 데이터페이지 기록 스레드, 로그 기록 스레드

-> [디스크] 데이터 파일, 트랜젝션 로그 파일

4.2.1 프라이머리 키에 의한 클러스터링
InnoDB의 모든 테이블은 기본적으로 프라이머리 키를 기준으로 클러스터링되어 저장된다. 
프라이머리 키가 클러스터링 인덱스이기 때문에 키를 이용한 레인지 스캔은 상당히 빨리 처리될 수 있다.
오라클 DBMS의 IOT(Index organized table) 와 동일한 구조가 InnoDB에서는 일반적인 테이블 구조가 되는 것이다.
클러스터 키에 대해서는 8.8 절 '클러스터링 인덱스'에서 다시 상세히 다루겠다.

4.2.2 외래 키 지원
외래 키에 대한 지원은 InnoDB 스토리지 엔진 레벨에서 지원하는 기능으로 MyISAM이나 MEMORY 테이블에서는 사용할 수 없다.
외래 키는 데이터베이스 서버 운영의 불편함 때문에 서비스용 데이터베이스에서는 생성하지 않는 경우도 있는데. 그렇다 하더라도 개발
 환경의 데이터베이스에서는 좋은 가이드 역할을 할 수 있다. 

forign_key_checks 시스템 변수를 OFF로 설정하면 외래 키 관계에 대한 체크 작업을 일시적으로 멈출 수 있다.

mysql> SET foreign_key_checks=OFF;

부모 테이블에 대한 작업(ON DELETE CASCADE와 ON UPDATE CASCADE 옵션)도 무시하게 된다.

4.2.3 MVCC(Multi Version Concurrency Control)
레코드 레벨의 트랜잭션을 지원하는 DBMS가 제공하는 기능이며 MVCC의 가장  큰 목적은 잠금을 사용하지 않는 
일관된 읽기를 제공하는 데 있다. 

create table member ( m_id int not null, m_name varchar(20) not null, m_area varchar(100) not null, primary key (m_id), index ix_Area (m_area) );
mysql> insert into member (m_id, m_name, m_area) values(12, '홍길동', '서울');
Query OK, 1 row affected (0.02 sec)

mysql> commit;
Query OK, 0 rows affected (0.00 sec)

insert 문이 실행되면 데이터베이스의 상태는 그림 4.10과 같은 상태로 바뀔 것이다.

[메모리] [InnoDB 버퍼풀] member, [언두 로그]
[데이터 파일(디스크)] member

mysql> update member set m_area = '경기' where m_id = 12;
Query OK, 1 row affected (0.02 sec)

[메모리] [InnoDB 버퍼풀] member 12, 홍길동, 경기, [언두 로그] 12, 서울
m_area 컬럼의 변경 전 값만 언두 로그로 복사
[데이터 파일(디스크)] member 12, 홍길동, ?
InnoDB 버퍼 풀의 변경 내용은 InnoDB 스토리지 엔진의 백그라운드 스레드에 의해서 기록된다.
그래서 InnoDB 버퍼 풀의 변경 내용이 디스크의 데이터 파일에 기록됐는지 여부는 시점에 따라 다를 수 있다.

그림4.11 UPDATE 후 InnoDB 버퍼 풀과 데이터 파일 및 언두 영역의 변화

위 update 를 명령어를 실행하고 commit 이나 rollback없이 

select * from member where m_id = 12; 실행하면 어떻게 될까?

이 질문의 답은 MySQL 서버의 시스템 변수(transaction_isolation)에 설정된 격리 수전(Isolation level)에 따라 다르다는 것이다.
격리 수준이 READ_UNCOMMITTED인 경우에는 InnoDB 버퍼 풀이 현재 가지고 있는 변경된 데이터를 읽어서 반환한다.
즉 데이터가 커밋됐든 아니든 변경된 상태의 데이터를 반환한다. 그렇지 않고 READ_COMMITTED나 그 이상의 격리 수준(REPEATABLE_READ, 
SERIALIZABLE)인 경우에는 아직 커밋되지 않았기 때문에 InnoDB 퍼버 풀이나 데이터 파일에 있는 내용 대신 변경되기 이전의 내용을 보
관하고 있는 언두 영역의 데이터를 반환한다.

update 쿼리가 실행되면 innoDB 버퍼 풀은 즉시 새로운 데이터로 변경되고 기존 데이터는 언두영역으로 복사되는 과정까지 살펴봤는데,
이 상태에서 commit 명령을 실행하면 InnoDB는 더 이상의 변경 작업 없이 지금의 상태를 영구적인 데이터로 만들어 버린다.
하지만 롤백을 하면 InnoDB에서는 언두 영역에 있는 백업된 데이터를 InooDB 버퍼 풀로 다시 복귀하고, 언두 영역의 내용을 삭제해 버린다.

커밋 된다고 언두 영역의 백업 데이터가 항상 바로 삭제되는 것은 아니다. 이 언두 영역을 필요로 하는 트랙잭션이 더는 없을 때 비로소
삭제 된다.













