B-Tree 인덱스의 깊이(Depth)는 상당히 중요하지만 직접 제어할 방법은 없다. 

여기서 인덱스 키 값의 평균 크기가 늘어나면 어떤 현상이 발생하는지 알아보자
B-Tree 깊이가 3인 경우 키 값이 16바이트인 경우에는 최대 2억(585*585*586)개 정도의 키 값을 담을 수 있지만, 키 값이 32바이트로 늘어나면 5천만(372*372*372) 개로 줄어든다.
B-Tree의 깊이는 MySQL에서 값을 검색할 때 몇 번이나 랜덤하게 디스크를 읽어야 하는지와 직결되는 문제다. 

여기서 언급한 내용은 사실 인덱스 키 값의 크기는 가능하면 작게 만드는 것이 좋다는 것을 강조하기 위함이고 실제로 아무리 대용량 데이터베이스라도 B-Tree의 깊이(Depth)가
5단계 이상까지 깊어지는 경우는 흔치 않다.

8.3.3.3 선택도(기수성)
인덱스에서 선택도(Selectivity) 또는 기수성(Cardinality)은 거의 같은 의미로 사용되며, 모든 인덱스 키 값 가운데 유니크한 값의 수를 의미한다.
전체 인덱스 키 값은 100개인데, 그중에서 유니크한 값의 수는 10개라면 기수성은 10이다. 인덱스 키 값 가운데 중복된 값이 많아지면 많아질수록 기수성은 낮아지고 동시에
선택도 또한 떨어진다. 인덱스는 선택도가 높을수록 검색 대상이 줄어들기 때문에 그만큼 빠르게 처리된다.

country라는 컬럼과 city라는 칼럼이 포함된 tb_test 테이블을 예로 들겠다. tb_test 테이블의 전체 레코드 건수는 1만 건이며, country 컬럼으로만 인덱스가 생성된 상태에서
아래의 두 케이스를 살펴보자. 

- 케이스 A: country 칼럼의 유니크한 값의 개수가 10개
- 케이스 B: country 칼럼의 유니크한 값의 개수가 1,000개

mysql> select * from tb_test where country = 'KOREA' AND city = 'SEOUL';

MySQL에서는 인덱스 통계 정보가 관리되기 때문에 city 칼럼의 기수성은 작업 범위에 아무런 영향을 미치지 못한다. 

A의 케이스의 경우에는 평균 1,000건, B의 케이스의 경우에는 평균 10건이 조회될 수 있다는 것을 인덱스의 통계 정보(유니킁한 값의 개수)로 예측할 수 있다. A케이스는 1건의
레코드를 위해 쓸모없는 999건의 레코드를 읽는 것이지만, B케이스는 9건만 더 읽는 것이다. 그래서 A 케이스의 경우 country칼럼에 생성된 인덱스는 비효율적이다. 
물론 필요한 만큼의 레코드만 정확하게 읽을 수 있다면 최상이 겠지만 현실적으로 모든 조건을 만족하게 인덱스를 생성한다는 것은 불가능하므로 이 정도의 낭비는 무시할 수 있다.

tb_city 테이블에서 1만 건의 레코드를 가지고 있는데, country 칼럼에만 인덱스가 준비돼 있다. 

create table tb_city(
    country varchar(10)
    , city varchar(10)
    , index ix_country (country)
);


mysql> select * from tb_test where country = 'KOREA' and city = 'SEOUL';

country 칼럼의 유니크 값이 10개일 때
country 칼럼의 유니크 값이 10개 이므로 tb_city 테이블에는 10개 국가(country)의 도시(city) 정보가 저장돼 있는 것이다. 인덱스된 컬럼(country)
여기서 전체 레코드 건수를 유니크한 값의 개수로 나눠보면 하나의 키 값으로 검색했을 때 대략 몇 건의 레코드가 일치할지 예측할 수 있게 된다.

tb_city 테이블에서는 country = 'KOREA'라는 조건으로 인덱스를 검색하면 1000건(10,000/10)이 일치하리라는 것을 예상할 수 있다. 그런데 인덱스를 통해 검색된 1000건 가운데
city = 'SEOUL'인 1건이므로 999건은 불필요하게 읽은 것으로 볼 수 있다.

- country 칼럼의 유니크 값이 1000개 일때
country 칼럼의 유니크 값이 1000개이므로 tb_city 테이블에는 1000개 국가(country)의 도시(city) 정보가 저장돼 있는 것이다. 이 케이스에서도 전체 레코드 건수를 국가 칼럼의
유니크 값 개수로 나눠보면 대략 한 국가당 10개 정도의 도시 정보가 저장돼 있으리라는 것을 예측할 수 있다. 

tb_city 테이블에서는 country = 'KOREA' 라는 조건으로 인덱스를 검색하면 10건(10,000/1,000)이 일치할 것이며, 그 10건 중에서 city = 'SEOUL'인 레코드는 1건이므로 9건만 불필요하게 읽은 것이다.

위 두 케이스 테이블에서 똑같은 쿼리를 실행해 똑같은 결과를 받았지만, 사실 두 쿼리가 처리되기 위해 MySQL 서버가 수행한 작업 내용은 매우 크다는 것을 알 수 있다.
이처럼 인덱스에서 유니크한 값의 개수는 인덱스나 쿼리의 효율성에 큰 영향을 미친다.















