
컴포넌트
8.0 부터는 플러그인 아키텍쳐를 대체하기 위해 컴포넌트 아키텍처가 지원된다.

5.7 버전까지는 비밀번호 검증 기능이 플러그인 형태로 제공됐지만 MySQL 8.0의 비밀번호 검증 기능은 컴포넌트로 개선됐다.

4.1.6 쿼리 실행 구조
클라이언트 -> SQL 요청 -> MySQL엔진(쿼리파서->전처리기->옵티마이저(쿼리 변환, 비용최적화, 실행계획 수립) ->쿼리 실행기)
-> 스토리지 엔진(InnoDB, MyISAM, Memory) -> SQL 결과 -> 클라이언트

쿼리파서
쿼리파서는 사용자 요청으로 들어온 쿼리 문장을 토큰(MySQL이 인식할 수 있는 최소 단위의 어휘나 기호)로 분리
해 트리 형태의 구조로 만들어 내는 작업을 의미한다. 쿼리 문장의 기본 문법 오류는 이 과정에서 발견되고
사용자에게 오류 메시지를 전달하게 된다.

전처리기
파서 과정에서 만들어지 파서 트리 기반으로 쿼리 문장에 구저적인 문제점이 있는지 확인한다.
각 토큰을 테이블 이름이나 칼럼 이름, 또는 내장 함수와 같은 개체를 매핑해 해당 객체의 존재 여부와 객체의
접근 권한 등을 확인하는 과정을 이 단계에서 수행한다. 실제 존재하지 않거나 권한상 사용할 수 없는 개체의
토큰은 이 단계에서 걸러진다.

옵티마이저
사용자의 요청으로 들어온 쿼리 문장을 저렴한 비용으로 가장 빠르게 처리할지를 결정하는 역할을 담당하며,
DBMS의 두뇌에 해당한다고 볼 수 있다. 이 책에서는 대부분 옵티마이저가 선택 하는 내용을 설명할 것이며,
어떻게 하면 옵티마이저가 더 나은 선택을 할 수 있게 유도하는가를 알려줄 것이다. 그만큼 옵티마이저의 역
할은 중요하고 영향 범위 또한 아주 넓다.

4.1.6.4 실행 엔진
옵티마이저가 두뇌라면 실행 엔진과 핸들러는 손과 발에 비유할 수 있다.(좀 더 재미있게 회사로 비유하자면
옵티마이저는 회사의 경영진, 실행 엔진은 중간 관리자, 핸들러는 각 업무의 실무자로 비유할 수 있다.)
실행 엔진이 하는 일을 더 쉽게 이해할 수 있게 간단하게 예를 들어 살펴보자. 옵티마이저가 group by를
처리하기 위해 임시 테이블을 사용하기로 결정했다고 해보자.

1. 실행 엔진이 핸들러에게 임시 테이블을 만들라고 요청
2. 다시 실행 엔진은 WHERE 절에 일치하는 레코드를 읽어오라고 핸들러에게 요청
3. 읽어온 레코드들을 1번에서 준비한 임시 테이블로 저장하라고 다시 핸들러에게 요청
4. 데이터가 준비된 임시 테이블에서 필요한 방식으로 데이터를 읽어 오라고 핸들러에게 다시 요청
5. 최종적으로 실행 엔진은 결과를 사용자나 다른 모듈로 넘김

즉, 실행 엔진은 만들어진 계획대로 각 핸들러에게 요청해서 받은 결과를 또 다른 핸들러 요청의 입력으로 연결하는
역할을 수행한다.

4.1.6.5 핸들러(스토리지 엔진)
앞에서 잠깐 언급한 것처럼 핸들러는 MySQL 서버의 가장 밑단에서 MySQL 실행 엔진의 요청에 따라 데이터를
디스크로 저장하고 디스크로부터 읽어 오는 역할을 담당한다. 핸들러는 결국 스토리지 엔진을 의미하며, MyISAM
테이블을 조작하는 경우에는 핸들러가 MyISAM 스토리지 엔진이 되고, InnoDB 테이블을 조작하는 경우에는
핸들러가 InnoDB 스토리지 엔진이 된다.

4.1.7 복제
MySQL 서버에서 복제(Replication)는 매우 중요한 역할을 담당하며, 지금까지 MySQL 서버에서 복제는 많은 발전을
거듭해왔다.  그래서 MySQL 서버의 복제에 관해서는 별도의 장에서 다루기로 하고, 기본적인 복제의 아키텍쳐 또한
16장 '복제'에서 살펴보겠다.

4.1.8 쿼리 캐시
MySQL 서버에서 쿼리 캐시(Query Cache)는 빠른 응답을 하는 웹 기반 응용 프로그램에서 매우 중요한 역할을 담당
했다. 쿼리 캐시는 SQL의 실행 결과를 메모리에 캐시하고, 동일 SQL 쿼리가 실행되면 테이블을 읽지 않고
즉시 결과를 반환하기 때문에 매우 빠른 성능을 보았다. 하지만 쿼리 캐시는 테이블의 데이터가 변경되면 
캐시에 저장된 결과 중에서 변경된 테이블과 관련된 것을을 모든 Invalidate 해야 한다. 이는 심각한 동시 처
성능 저하를 유발한다. 또한 MySQL 서버가 발전하면서 성능이 개선되는 과정에서 쿼리 캐시는 계속된 동시 처리 
성능 저하와 많은 버그의 원인이 되기도 한다.

결국 MySQL 8.0으로 올라오면서 쿼리 캐시는 MySQL 서버의 기능에서 완전히 제거되고, 관련된 시스템 변수도
모두 제거됐다. MySQL 서버의 쿼리 캐시 기능은 아주 독특한 환경에서는 매우 훌륭한 기능이지만 이런 요건을
가진 서비스는 흔치 않다. 실제 쿼리 캐시 기능이 도움이 됐던 서비스는 거의 없었다. 

4.1.9 스레드 풀
MySQL 서버 엔터프라이즈 에디션은 스레드 풀(Thread Pool) 기능을 제공하지만 MySQL 커뮤니티 에디션은 스레드
풀 기능을 지원하지 않는다. Percona Server에서 제공하는 스레드 풀 기능을 살펴보고자 한다.

MySQL 엔터프라이즈 스레드 풀 기능은 MySQL 서버 프로그램에 내장돼 있자만 Percona Server의 스레드 풀은 플러그인 형태로
작동하게 구현돼 있다는 차이점이 있다. 

스레드 풀은 내부적으로 사용자의 요청을 처리하는 스레드 개수를 줄여서 동시 처리되는 요청이 많다 하더라도 MySQL 서버의 CPU
가 제한된 개수의 스레드 처리에만 집중할 수 있게 해서 서버의 자원 소모를 줄이는 것이 목적이다. 많은 사람들은 MySQL 서버에서
스레드 풀만 설치하면 성능이 그냥 두 배쯤 올라갈 거라고 기대하는데, 스레드 풀이 실제 서비스에서 눈에 띄는 성능 향상을 보여준
경우는 드물었다. 스레드들을 CPU가 최대한 잘 처리해낼 수 있는 수준으로 줄여서 빨리 처리하게 하는 기능이기 때문에 스케줄
링 과정에서 CPU시간을 제대로 확보하지 못하는 경우에는 쿼리 처리가 더 느려지는 사례도 발생할수 있다는 점에 주의하자.
물론 제한된 수의 스레드만 CPU가 처리하도록 적절히 유도한다면 CPU 프로세서 친화도(Processor afiinity)를 높이고 운영체제 입장에서는
불필요한 컨텍스트 스위치(Context switch)를 줄여서 오버헤드를 낮출 수 있다.

프로세서 친화도는 프로세서 우선순위랑 다른 개념으로 정리할 필요성이 있다.

Percona Server의 스레드 풀은 기본적으로 CPU 코어의 개수만큼 스레드 그룹을 생성하는데, 스레드 그룹의 개수는 thread_poll_size
시스템 변수의를 변경해서 조정할 수 있다. 일반적으로 CPU코어의 개수와 맞추는 것이 CPU 프로세서 친화도를 높이는 데 좋다.
MySQL 서버가 처리해야 할 요청이 생기면 스레드 풀로 처리를 이관하는데, 만약 이미 스레드 출이 처리 중인 작업이 있는 경우에는
thread_pool_oversubscribe 시스템 변수에 설저오딘 개수만큼 추가로 더 받아들여서 처리한다.
이 값이 너무 크면 스케줄링해야 할 스레드가 많아져서 스레드 풀이 비효율적으로 작동할 수 있다.

스레드 그룹은 모든 스레드가 일을 처리하고 있다면 스레드를 추가할지 기존 작업 스레드 처리를 완료할 때까지 기다릴지 여부를 판단해야한다.
스레드 풀의 타이머 스레드는 주기적으로 스레드 그룹의 상태를 체크해서 thread_pool_stall_limit 시스템 변수에 정의된 밀리초만큼 
작업 스레드가 지금 처리 중인 작업을 끝내지 못하면 새로운 스레드를 생성해서 스레드 그룹에 추가한다.

Percona Server의 스레드 풀 플러그인은 선순위 큐와 후순위 큐를 이용해 특정 트랜젝션이나 쿼리를 우선적으로 처리할 수 있는 기능도
제공한다. 이렇게 먼저 시작된 트랜잭션 내에 속한 SQL으 빨리 처리해주면 해당 트랜젝션이 가지고 있던 잠금이 빨리 해제되고 잠금 경합을
낮춰서 전체적인 처리 성능을 향상시킬 수 있다. 











