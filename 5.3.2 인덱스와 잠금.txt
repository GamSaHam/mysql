
"레코드 락"을 소개하면서 잠깐 언급했듯이 InnoDB의 잠금은 레코드를 잠그는 것이 아니라 인덱스를 잠그는 방식으로 처리된다.

---  

use employees;

# // 예제 데이터베이스의 employees 테이블에는 아래와 같이 first_name 칼럼만
# // 멤버로 담긴 ix_firstname이라는 인덱스가 준비돼 있다.
# // KEY ix_firstname (first_name)
# // employees 테이블에서 first_name='Georgi'인 사원은 전체 253명이 있으며,
# // first_name='Georgi'이고 last_name='Klassen'인 사원은 딱 1명만 있는 것을 아래 쿼리로
# // 확인할 수 있다.

select count(*) from employees where first_name = 'Georgi';
# 253

select count(*) from employees where first_name = 'Georgi' and last_name = 'Klassen';
# 1

# employees 테이블에서 first_name = 'Georgi' 이고 last_name = 'Klassen'인 사원의 입사 일자를 오늘로 변경하는
# 쿼리를 실행해 보자

update employees set hire_date = NOW() where first_name = 'Georgi' and last_name = 'Klassen';
---

update 문장이 실행되면 1건의 레코드가 업데이트 된다. 하지만 1건의 업데이트를 위해 몇개의 레코드에 락을 걸어야 할까?
update 문에서 인덱스를 이용할 수 있는 조건은 first_name='Georgi'이며, last_name 칼럼은 인덱스가 없기 때문에
first_name = 'Georgi' 인 레코드 253건에 레코드가 모두 잠긴다.
그림 5.2는 예제의 update 문장이 어떻게 변경 대상 레코드를 검색하고, 실제 변경이 수행되는지를 보여준다. 
이러한 부분을 잘 모르고 개발하면 MySQL 서버를 제대로 이용하지 못할 것이다. 이 예제에서는 몇 건 안 되는 레코드만 잠그지만 update
문장을 위해 적절히 인덱스가 준비돼 있지 않다면 클라이언트 간의 동시성이 상당히 떨어져서 한 세션에서 update 작업을 하는 중에는 다른
클라이언트는 그 테이블을 업데이트하지 못하고 기다려야 하는 상황이 발생할 것이다.

인덱스 리프 노드(idx_firstname)

first_name, emp_no
Georgi, 10001
Georgi, 10909
Georgi, 11029
...
->

테이블(employees)
emp_no, first_name, last_name
10001, Georgi, Facello
10909, Georgi, Atchley
11029, Georgi, Klassen
...

이 테이블에 인덱스가 하나도 없다면 어떻게 될까? 이러한 경우에는 테이블을 풀 스캔하면서 update 작업을 하는데, 이 과정에서 
테이블에 있는 30여만 건의 모든 레코드를 잠그게 된다. MySQL의 InnoDB에서 인덱스 설계가 중요한 이유 또한 이것이다.














